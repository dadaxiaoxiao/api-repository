// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: search/v1/sync.proto

package searchv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SyncService_InputAny_FullMethodName     = "/search.v1.SyncService/InputAny"
	SyncService_InputUser_FullMethodName    = "/search.v1.SyncService/InputUser"
	SyncService_InputArticle_FullMethodName = "/search.v1.SyncService/InputArticle"
)

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 同步服务
// 遵循 CQRS
type SyncServiceClient interface {
	// 通用的同步数据
	//
	// 这个时兜底功能，在没有业务定制化功能时，可暂时使用该接口
	InputAny(ctx context.Context, in *InputAnyRequest, opts ...grpc.CallOption) (*InputAnyResponse, error)
	// 同步User 数据
	InputUser(ctx context.Context, in *InputUserRequest, opts ...grpc.CallOption) (*InputUserResponse, error)
	// 同步Article 数据
	InputArticle(ctx context.Context, in *InputArticleRequest, opts ...grpc.CallOption) (*InputArticleResponse, error)
}

type syncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncServiceClient(cc grpc.ClientConnInterface) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) InputAny(ctx context.Context, in *InputAnyRequest, opts ...grpc.CallOption) (*InputAnyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InputAnyResponse)
	err := c.cc.Invoke(ctx, SyncService_InputAny_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) InputUser(ctx context.Context, in *InputUserRequest, opts ...grpc.CallOption) (*InputUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InputUserResponse)
	err := c.cc.Invoke(ctx, SyncService_InputUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) InputArticle(ctx context.Context, in *InputArticleRequest, opts ...grpc.CallOption) (*InputArticleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InputArticleResponse)
	err := c.cc.Invoke(ctx, SyncService_InputArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncServiceServer is the server API for SyncService service.
// All implementations must embed UnimplementedSyncServiceServer
// for forward compatibility
//
// 同步服务
// 遵循 CQRS
type SyncServiceServer interface {
	// 通用的同步数据
	//
	// 这个时兜底功能，在没有业务定制化功能时，可暂时使用该接口
	InputAny(context.Context, *InputAnyRequest) (*InputAnyResponse, error)
	// 同步User 数据
	InputUser(context.Context, *InputUserRequest) (*InputUserResponse, error)
	// 同步Article 数据
	InputArticle(context.Context, *InputArticleRequest) (*InputArticleResponse, error)
	mustEmbedUnimplementedSyncServiceServer()
}

// UnimplementedSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncServiceServer struct {
}

func (UnimplementedSyncServiceServer) InputAny(context.Context, *InputAnyRequest) (*InputAnyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputAny not implemented")
}
func (UnimplementedSyncServiceServer) InputUser(context.Context, *InputUserRequest) (*InputUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputUser not implemented")
}
func (UnimplementedSyncServiceServer) InputArticle(context.Context, *InputArticleRequest) (*InputArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputArticle not implemented")
}
func (UnimplementedSyncServiceServer) mustEmbedUnimplementedSyncServiceServer() {}

// UnsafeSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServiceServer will
// result in compilation errors.
type UnsafeSyncServiceServer interface {
	mustEmbedUnimplementedSyncServiceServer()
}

func RegisterSyncServiceServer(s grpc.ServiceRegistrar, srv SyncServiceServer) {
	s.RegisterService(&SyncService_ServiceDesc, srv)
}

func _SyncService_InputAny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputAnyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).InputAny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_InputAny_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).InputAny(ctx, req.(*InputAnyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_InputUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).InputUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_InputUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).InputUser(ctx, req.(*InputUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_InputArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).InputArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SyncService_InputArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).InputArticle(ctx, req.(*InputArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncService_ServiceDesc is the grpc.ServiceDesc for SyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.v1.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InputAny",
			Handler:    _SyncService_InputAny_Handler,
		},
		{
			MethodName: "InputUser",
			Handler:    _SyncService_InputUser_Handler,
		},
		{
			MethodName: "InputArticle",
			Handler:    _SyncService_InputArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search/v1/sync.proto",
}
